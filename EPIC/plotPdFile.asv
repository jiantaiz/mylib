function [t_out,wave_out] = plotPdFile(fname, WaveGenerators, ENTRY)
% PLOTPDFILE plots sequence waveform from pulse database (.pd, .pdx) file generated by WTOOLS.
%    [t_out,wave_out] = PLOTPDFILE(fname, WaveGenerators, ENTRY) 
%        fname : pulse database file name
%        WaveGenerators : An array indicating which wavegenerators to plot, default [1,2,3,4,8].
%                         1=X, 2=Y, 3=Z, 4=Rho 1, 5=Rho 2, 6=Theta, 7=Omega, 8=SSP, 9=Aux
%        ENTRY : sequence entry point, default 1
%        t_out, wave_out : time and sequence waveform.
%        No plots if number of output >0
%    See also: readPdFile, PlotPulseTimeHist

% AUTHOR    : Yi Sui
% DATE      : 05/16/2016

if nargin <2 || isempty(WaveGenerators)
    WaveGenerators = [1:4 8];% 1=X, 2=Y, 3=Z, 4=Rho 1, 5=Rho 2, 6=Theta, 7=Omega, 8=SSP, 9=Aux
end
if nargin <3
    ENTRY = 1;
end

[wavegen, wmem, header] = readPdFile(fname);

sequence=[];
for  WGEN = WaveGenerators;
    DSP = wavegen(WGEN).dsp_index;
    WMEM = wmem{DSP};
    updatetime = 0.004 / DSP; % 0.004 msec for DSP1, 0.002 msec for DSP2
    INST_TAB =  wavegen(WGEN).inst_tab;
    dt = [];
    waveform=[];
    entry_point = 1;
    is_SSP=0;
    if strfind(wavegen(WGEN).name,'SSP')
        %         disp 'SSP board';
        updatetime = 0.001;
        is_SSP = 1;
    end
    
    for k = 1:size(INST_TAB,1)
        %walk though instruction table
        wave_idx = INST_TAB(k,1);
        period = double(INST_TAB(k,2));
        amp = double(INST_TAB(k,3));
        
        if is_SSP
            if amp == 0;
                amp =1;
            elseif amp > 1 && amp < intmax('int32')
                amp = amp./100;
            end
        end
        
        
        if amp < intmax('int32') % not the end of sequence
            for j = wave_idx : numel(WMEM)
                if ( mod(WMEM(j),2)  == 1 ) % the smallest bit( = 1)indicated the end of a waveform
                    w = WMEM(wave_idx : j ); % get waveform
                    break;
                end
            end
            
            if period > 1 %add a sampling point at the start of a long period, to avoid saw-tooth like plot
                dt2 = zeros(1,numel(w)*2);
                dt2(1:2:end) = 1 * updatetime; % start point
                dt2(2:2:end) = (period-1) * updatetime; %end point of the period
                w2 = [w';w'];
                w2=w2(:);
            else
                dt2 = period.* updatetime .* ones(1,numel(w));
                w2 = w(:);
            end
            dt = [dt, dt2];
            waveform = [waveform, amp .* w2' ];
            
        elseif amp == intmax('int32'); % end of sequence
            if ~isempty(waveform);
                sequence(WGEN,entry_point).time = cumsum(dt);
                sequence(WGEN,entry_point).waveform = waveform;
                entry_point = entry_point + 1;
            end
            dt =[];
            waveform=[];
        end
        
    end
end

%
% ENTRY = 1;
N_WAVEGEN = numel(WaveGenerators);
% N_WAVEGEN = 4;
%  figure;
for num = 1:N_WAVEGEN
    WGEN = WaveGenerators(num);
    
    
    time = sequence(WGEN,ENTRY).time;
    wave = sequence(WGEN,ENTRY).waveform;%./2^30;
    name = wavegen(WGEN).name;
    if nargout == 0
        ax(num) = subplot(N_WAVEGEN, 1, num );
        plot(time,wave,'-','tag','waveform');
        ylabel(name)
        grid on;
    end
    %     hold on;
    if nargout >0
        if isempty(strfind(name,'SSP'))
            t(num) = {floor(time.*1000)};%convert to usec
            wv(num) = {wave};
        else
            disp 'SSP board ignored'
        end
    end
end

if nargout >0
    t_out = unique([t{:}])';
    for num = 1:numel(t)
        wave_out (:,num) = interp1(t{num}, wv{num}, t_out);
    end
    %     wave_out (:,2) = interp1(t{2}, wv{2}, t_out);
    %     wave_out (:,3) = interp1(t{3}, wv{3}, t_out);
end

if nargout == 0
    linkaxes (ax,'x');
end
